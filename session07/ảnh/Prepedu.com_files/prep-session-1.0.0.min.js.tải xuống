var D = (e) => {
  throw TypeError(e);
};
var S = (e, n, t) => n.has(e) || D("Cannot " + t);
var h = (e, n, t) => (S(e, n, "read from private field"), t ? t.call(e) : n.get(e)), g = (e, n, t) => n.has(e) ? D("Cannot add the same private member more than once") : n instanceof WeakSet ? n.add(e) : n.set(e, t), m = (e, n, t, a) => (S(e, n, "write to private field"), a ? a.call(e, t) : n.set(e, t), t), c = (e, n, t) => (S(e, n, "access private method"), t);
(() => {
  var t, a, l, s, w, p, k, v, I, x;
  const e = "_visitor_session_data";
  class n {
    set(o, d, r = {}) {
      (r = { path: "/", ...r }).expires === void 0 && (r.expires = /* @__PURE__ */ new Date(), r.expires.setDate(r.expires.getDate() + 30)), r.expires.toUTCString && (r.expires = r.expires.toUTCString());
      let u = encodeURIComponent(o) + "=" + encodeURIComponent(d);
      for (const f in r) {
        u += "; " + f;
        const y = r[f];
        y !== !0 && (u += "=" + y);
      }
      document.cookie = u;
    }
    get(o) {
      const d = document.cookie.match(new RegExp("(?:^|; )" + o.replace(/([.$?*|{}()\[\]\\\/+^])/g, "\\$1") + "=([^;]*)"));
      return d ? decodeURIComponent(d[1]) : void 0;
    }
    delete(o) {
      this.set(o, "", { "max-age": -1, expires: /* @__PURE__ */ new Date() });
    }
  }
  window.PrepSession = new (x = class {
    constructor() {
      g(this, s);
      g(this, t);
      g(this, a);
      g(this, l);
      m(this, t, new n());
    }
    init(i = {}) {
      m(this, a, i.cookieDomain ?? (typeof window > "u" ? "" : window.location.hostname)), m(this, l, i.sessionPeriodMinutes ?? 30), this.getSessionId() || c(this, s, k).call(this), c(this, s, I).call(this);
    }
    getSessionId() {
      return c(this, s, p).call(this).id || null;
    }
    getSessionValues() {
      return c(this, s, p).call(this);
    }
    getSessionValue(i = "") {
      return c(this, s, p).call(this)[i];
    }
    setSessionValue(i, o) {
      if (!i || i === "id") return;
      const d = c(this, s, p).call(this);
      d[i] = o, h(this, t).set(e, JSON.stringify(d), { domain: h(this, a), expires: c(this, s, w).call(this) });
    }
  }, t = new WeakMap(), a = new WeakMap(), l = new WeakMap(), s = new WeakSet(), w = function() {
    const i = /* @__PURE__ */ new Date();
    return new Date(i.getTime() + 6e4 * h(this, l));
  }, p = function() {
    try {
      const i = JSON.parse(h(this, t).get(e));
      return typeof i == "object" ? i : {};
    } catch {
      return {};
    }
  }, k = function() {
    h(this, t).set(e, JSON.stringify({ id: (/* @__PURE__ */ new Date()).getTime().toString(36) }), { expires: c(this, s, w).call(this), domain: h(this, a) });
  }, v = function() {
    this.getSessionId() && h(this, t).set(e, JSON.stringify(c(this, s, p).call(this)), { expires: c(this, s, w).call(this), domain: h(this, a) });
  }, I = function() {
    const i = /* @__PURE__ */ ((o, d) => {
      let r = null;
      return (...u) => {
        window.clearTimeout(r), r = window.setTimeout(() => {
          o.apply(null, u);
        }, d);
      };
    })(c(this, s, v).bind(this), 3e3);
    ["click", "scroll", "keypress"].forEach((o) => {
      document.removeEventListener(o, i);
    }), ["click", "scroll", "keypress"].forEach((o) => {
      document.addEventListener(o, i);
    });
  }, x)();
})();
